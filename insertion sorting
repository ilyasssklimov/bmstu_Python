"""
------------------------------------------------------------------------------------------
Developed by Ilya Klimov, student of BMSTU
------------------------------------------------------------------------------------------
This program can sort small size array, create a table for measuring the time of
sorting arrays of three different sizes and plot the graph of dependence of the sorting
time on the size of array
------------------------------------------------------------------------------------------
There are three parts for each action where you can enter input
------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------
"""


import random as rnd
import tkinter as tk
from tkinter.ttk import Button, Separator
from time import time as tm
from pandas import DataFrame
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from tkinter import messagebox as mb


def search(b, val, right):
    """
    binary search
    :return: item number
    """
    left = 0
    while left < right:
        m = (left + right) // 2
        if b[m] < val:
            left = m + 1
        else:
            right = m
    return left


def sort_bin(b):
    """
    insertion sorting
    :return: sorted array
    """
    for i in range(1, len(b)):
        if b[i - 1] > b[i]:
            j = i - 1
            k = search(b, b[i], j)
            for m in range(j, k - 1, -1):
                b[m], b[m + 1] = b[m + 1], b[m]
    return b


def generate():
    """
    generate random array and input it to entry field
    """
    n = rnd.randint(5, 10)
    e_a.delete(0, 'end')
    for i in range(n):
        x = rnd.randint(-100, 100)
        e_a.insert(len(e_a.get()), f' {x}')


def sorting():
    """
    show sorting array
    """
    array = e_a.get().strip().split()

    try:
        array = [int(i) for i in array]
    except ValueError:
        return error('There can be integer numbers')

    array = sort_bin(array)

    arr_str = ''
    for el in array:
        arr_str += str(el) + ' '

    srt["text"] = 'Sorted array: ' + arr_str


def both():
    """
    generate and sorting both
    """
    generate()
    sorting()
    e_a.insert(len(e_a.get()), ' ')


def check_str(line):
    """
    :param: line
    check if there are another characters in the string <line>
    """
    for letter in line:
        if ((letter >= '0') and (letter <= '9')) or (letter == ' '):
            continue
        else:
            return True
    return False


def display():
    """
    show first part with sorting small arrays
    """
    btn_gen_srt = Button(app, text='Generate and sort array', command=both)
    btn_gen_srt.grid(row=0, column=2, sticky="wens")
    btn_gen = Button(app, text='Generate array', command=generate)
    btn_gen.grid(row=1, column=2, sticky="wens")
    btn_srt = Button(app, text='Sort array', command=sorting)
    btn_srt.grid(row=2, column=2, sticky="wens")

    inp = tk.Label(app, text='Input array: ', font='Times 18')
    inp.grid(row=1, column=0)

    def update_input():
        """
        dynamic update labels
        """
        enr = e_a.get()
        if enr.strip() == '':
            inp["text"] = 'Input array: '
            srt["text"] = 'Wait command to sort array...'
        elif enr != inp["text"][13:]:
            inp["text"] = 'Input array: ' + enr
            if enr[-1] != ' ':
                srt["text"] = 'Wait command to sort array...'
        root.after(1, update_input)
    root.after(1, update_input)


def time():
    """
    calculate times for table
    :return: array with times
    """
    array = [[], [], []]
    n1 = int(e_n1.get())
    n2 = int(e_n2.get())
    n3 = int(e_n3.get())
    n = [n1, n2, n3]

    for i in range(3):
        arr1 = []
        arr2 = []
        arr3 = []
        for j in range(n[i]):
            arr1.append(j)
            arr2.append(rnd.randint(-100000, 100000))
            arr3.append(n[i] - j)

        arr = [arr1, arr2, arr3]
        for j in arr:
            start = tm()
            sort_bin(j)
            loc = tm() - start
            array[i].append(loc)
    return array


def create_table():
    try:
        result = time()
    except ValueError:
        return error('Each time can be only one integer')

    t1["text"] = '{:.6f}'.format(result[0][0])
    t4["text"] = '{:.6f}'.format(result[0][1])
    t7["text"] = '{:.6f}'.format(result[0][2])
    t2["text"] = '{:.6f}'.format(result[1][0])
    t5["text"] = '{:.6f}'.format(result[1][1])
    t8["text"] = '{:.6f}'.format(result[1][2])
    t3["text"] = '{:.6f}'.format(result[2][0])
    t6["text"] = '{:.6f}'.format(result[2][1])
    t9["text"] = '{:.6f}'.format(result[2][2])


def screen_table():
    """
    show second part with measuring the time of the sorting arrays
    """
    h = tk.Label(table, width=10)
    h.grid(row=0, column=0, columnspan=2, padx=1, pady=1, sticky="wens")
    h_n1 = tk.Label(table, text='N1', width=8, font='Times 15')
    h_n1.grid(row=0, column=3, padx=1, pady=1)
    h_n2 = tk.Label(table, text='N2', width=8, font='Times 15')
    h_n2.grid(row=0, column=4, padx=1, pady=1)
    h_n3 = tk.Label(table, text='N3', width=8, font='Times 15')
    h_n3.grid(row=0, column=5, padx=1, pady=1)

    h_ord = tk.Label(table, text='Ordered array', width=14, font='Times 15')
    h_ord.grid(row=1, column=0, columnspan=2, padx=1, pady=1)
    h_rnd = tk.Label(table, text='Random array', width=14, font='Times 15')
    h_rnd.grid(row=2, column=0, columnspan=2, padx=1, pady=1)
    h_rvs = tk.Label(table, text='Reverse array', width=14, font='Times 15')
    h_rvs.grid(row=3, column=0, columnspan=2, padx=1, pady=1)

    text_title = 'Input three sizes of arrays'
    tab_title = tk.Label(btn_table, text=text_title, font='Times 17 italic')
    tab_title.grid(row=0, column=0, columnspan=2, padx=1, pady=1)

    n1 = tk.Label(btn_table, text='N1: ', font='Times 15')
    n1.grid(row=1, column=0)
    n2 = tk.Label(btn_table, text='N2: ', font='Times 15')
    n2.grid(row=2, column=0)
    n3 = tk.Label(btn_table, text='N3: ', font='Times 15')
    n3.grid(row=3, column=0)

    btn_n1 = Button(btn_table, text='Create the table', command=create_table)
    btn_n1.grid(row=4, column=0, columnspan=2, pady=5, sticky="wens")


def graph():
    """
    plot the graph of dependence of the sorting time on the size of array
    """
    data_0 = {'Size': [],
              'Time': []
              }
    df_0 = DataFrame(data_0, columns=['Size', 'Time'])
    figure = plt.Figure(figsize=(5, 4), dpi=80)

    ax = figure.add_subplot(111)
    ax.set_title('Dependence of the sorting time on the size of array')
    line = FigureCanvasTkAgg(figure, graph_app)
    line.get_tk_widget().grid(row=1, columnspan=3)

    df_0 = df_0[['Size', 'Time']].groupby('Size').sum()
    df_0.plot(kind='line', legend=True, ax=ax, color='black', marker='o', fontsize=10)

    def update_graph():
        """
        dynamic update graph
        """
        nonlocal figure, ax, line
        figure.clear()

        try:
            data = {'Size': [int(e_st.get()) + i * int(e_d.get()) for i in range(10)],
                    'Time': [time_loc(int(e_st.get()) + i * int(e_d.get())) for i in range(10)]
                    }
        except ValueError:
            return error('Size and step can be only integers')

        df = DataFrame(data, columns=['Size', 'Time'])

        ax = figure.add_subplot(111)
        ax.set_title('Dependence of the sorting time on the size of array')
        line = FigureCanvasTkAgg(figure, graph_app)
        line.get_tk_widget().grid(row=1, columnspan=3)

        df = df[['Size', 'Time']].groupby('Size').sum()
        df.plot(kind='line', legend=True, ax=ax, color='black', marker='o', fontsize=10)

    text_title = 'Input first size of array and step'
    gr_title = tk.Label(graph_input, text=text_title, font='Times 17 italic')
    gr_title.grid(row=0, column=3, columnspan=2, pady=5)

    st = tk.Label(graph_input, text='Initial size: ', font='Times 15')
    st.grid(row=1, column=3)
    d = tk.Label(graph_input, text='Step: ', font='Times 15')
    d.grid(row=2, column=3)

    btn_g = Button(graph_input, text='Plot the graph', command=update_graph)
    btn_g.grid(row=3, column=3, columnspan=2, pady=5, sticky="wens")


def time_loc(n):
    """
    :param: n
    generate n-size array and calculate the time of the sorting it
    :return: time
    """
    arr = [rnd.randint(-100000, 100000) for i in range(n)]
    start = tm()
    sort_bin(arr)
    loc = tm() - start
    return loc


def error(mes):
    """
    show a error with message (:param: mes) due to inability to do an action
    """
    mb.showerror('Error', mes)


if __name__ == '__main__':
    root = tk.Tk()
    root.title('Insertion sorting with binary search')

    app = tk.Frame(root, pady=10, padx=10)
    app.grid()

    e_a = tk.Entry(app, font='Times 15', width=40)
    e_a.grid(row=0, column=0, columnspan=2, sticky='wens')
    srt = tk.Label(app, text='Wait command to sort array...', font='Times 18')
    srt.grid(row=2, column=0)

    display()

    separator_1 = Separator(app, orient='horizontal')
    separator_1.grid(row=3, column=0, columnspan=6, pady=10, sticky='we')

    table = tk.Frame(app, pady=1, padx=1, bg='black')
    table.grid(row=4, column=0)

    btn_table = tk.Frame(app, pady=1, padx=1)
    btn_table.grid(row=4, column=2)

    e_n1 = tk.Entry(btn_table, font='Times 15')
    e_n1.grid(row=1, column=1, sticky='wens')
    e_n2 = tk.Entry(btn_table, font='Times 15')
    e_n2.grid(row=2, column=1, sticky='wens')
    e_n3 = tk.Entry(btn_table, font='Times 15')
    e_n3.grid(row=3, column=1, sticky='wens')

    t1 = tk.Label(table, text='', width=8, font='Times 15')
    t1.grid(row=1, column=3, padx=1, pady=1)
    t2 = tk.Label(table, text='', width=8, font='Times 15')
    t2.grid(row=1, column=4, padx=1, pady=1)
    t3 = tk.Label(table, text='', width=8, font='Times 15')
    t3.grid(row=1, column=5, padx=1, pady=1)
    t4 = tk.Label(table, text='', width=8, font='Times 15')
    t4.grid(row=2, column=3, padx=1, pady=1)
    t5 = tk.Label(table, text='', width=8, font='Times 15')
    t5.grid(row=2, column=4, padx=1, pady=1)
    t6 = tk.Label(table, text='', width=8, font='Times 15')
    t6.grid(row=2, column=5, padx=1, pady=1)
    t7 = tk.Label(table, text='', width=8, font='Times 15')
    t7.grid(row=3, column=3, padx=1, pady=1)
    t8 = tk.Label(table, text='', width=8, font='Times 15')
    t8.grid(row=3, column=4, padx=1, pady=1)
    t9 = tk.Label(table, text='', width=8, font='Times 15')
    t9.grid(row=3, column=5, padx=1, pady=1)

    screen_table()

    separator_2 = Separator(app, orient='horizontal')
    separator_2.grid(row=6, column=0, columnspan=6, pady=5, sticky='we')

    graph_app = tk.Frame(app, pady=1, padx=1)
    graph_app.grid(row=7, column=0)

    graph_input = tk.Frame(app)
    graph_input.grid(row=7, column=2)

    e_st = tk.Entry(graph_input, font='Times 15')
    e_st.grid(row=1, column=4, sticky='wens')
    e_d = tk.Entry(graph_input, font='Times 15')
    e_d.grid(row=2, column=4, sticky='wens')

    graph()

    root.mainloop()
